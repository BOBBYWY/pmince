



                          Lesson 8: Buffers





      You may remember the word "buffer" from Lesson 3, when we
learned how to read and write files from the text buffer.  As you
recall, we said that the buffer was a place for storing the text
while we manipulated it, and that files were copied into it and
replaced from it.

      Mince has more than one buffer for manipulating text.  This
can be handy when you are working on several files at once.  For
example, this manual is made up of several chapters, and if we
wanted to edit two or three of them, making changes to one based
upon the others, it would be nice to be able to read them all
into Mince at the same time.  Each file we chose to use could be
read into one of Mince's buffers.

      For example, start using Mince to edit this chapter, called
"lesson8.doc", by typing:

      C-X C-R  lesson8.doc  <CR>

to Mince.  (Remember that the disc drives are labelled, and that
if the file can't be found, you may have to type "B:lesson8.doc"
or some such for the file name.)  (Remember also that "<CR>"
stands for "carriage-return.  If you should forget what character
to terminate the filename with, just look in the message asking
what file to read; it will always have the "<CR>" in it for file
commands.)

      Look at the mode line at the bottom of the screen.  Notice
the portion that says "main: lesson8.doc".  In the mode line,
"main" is the buffer name.  Since we have multiple buffers for
storing text, they must be named in some way, just like files or
disc drives.  Buffer names may be from one to eight characters
long.  "main" is the one you get automatically when you start
Mince up.  Each of these buffers of text also has a filename
associated with it.  In this case, the filename is "lesson8.doc".
We talked about filenames in Lesson 3.

      There is a command which will list on the screen what
buffers of text currently exist.  This command is C-X C-B, the
"list Buffers" command.  Try it now.  Type:

      C-X C-B

You should see a display at the top of the screen, overwriting
whatever text was there before.  The text is not gone, just
momentarily not displayed; this is an exception to the rule that
what you see on the screen is what is in your document.  Take a
quick look at the display line with the buffer list on it.  It
has the name, "main", and the file name, "lesson8.doc", and a
number, which tells you how many characters are in the buffer of
text.  Type a C-L now to redisplay the screen.  The buffer list
has been replaced by the original text again.

      There is a command to create a new buffer, the C-X B
command.  It stands for "goto Buffer", and looks similar to the
C-X C-B command, so you can remember them both fairly easily.
Try this command now.  Type:

      C-X B

Mince will ask you for the name of a buffer to use, by displaying
a message in the echo line.  Type in the name "other", followed
by a carriage-return.  Mince will ask you if you want to create a
new text buffer.  We do, so type a "Y" to answer yes.  Now the
screen is devoid of text.  Look at the mode line, and notice that
the buffer name is now "other".  We moved into a brand new text
buffer, which has no characters in it.  Notice also that the
filename in the mode line associated with this buffer is called
"DELETE.ME" This is so that if you mistakenly type a C-X C-W
command to write the file without giving a filename, the text
will be stored in a conspicuously-named file.  Type a few
characters just so the buffer isn't empty.

      Now type a C-X C-B again to see a new list of the text
buffers.  Notice that the list now shows two buffers, "main" and
"other".  Going to a new text buffer did not delete the old one;
it is just waiting for whenever you want to go back to it.  Do
that now; type:

      C-X B  main  <CR>

The Lesson 8 text will appear again.  Note that C-X B didn't ask
you if you wanted to create a new buffer, because one by that
name already existed.  Type the C-X C-B command again, to list
the buffers.  Notice that there is an asterisk beside the "other"
buffer.  This means the same thing as the star on the mode line
does: the text buffer hasn't been written out to a file since it
has been modified.

      Now go to another new buffer, called "lesson6".  Type:

      C-X B  lesson6  <CR>  Y

(The "Y" is in answer to the question asking if we want to create
a new buffer.)  Now that you're in the "lesson6" buffer, read in
the file containing Lesson 6.  Type:

      C-X C-R  lesson6.doc  <CR>

The text will appear (if you got the file name right) and the
mode line will now have a section saying "lesson6: LESSON6.DOC".
Type a C-X C-B again to get your bearings, if you like.

      It is usually very useful to have the buffer name be the
same as the first half of the file name which Mince and the
computer system use.  We just accomplished that by creating a
buffer with a name appropriate to the file we were about to read
in.  But Mince can do this automatically for us.  The command C-X
C-F (for "Find File") will read in a file, in the same manner as
C-X C-R, but will automatically create a buffer of the
appropriate name for it.  Try it now.  Type:

      C-X C-F  lesson4.doc  <CR>

The mode line will now say "lesson4: LESSON4.DOC", and the text
of Lesson 4 should be on the screen.

      The C-X C-F find-file command does just a little more than
automatically selecting a "nice" buffer name.  It will look
through all the Mince buffers you have to see if the file you
want to find has already been read into a text buffer before.  If
so, it just switches to that buffer, rather than creating a new
one and reading in the file.  This is almost certainly what you
want; if you had made changes to a buffer containing a file and
then did a find-file, you would want to see the modified version.
Try it now.  Type:

      C-X C-F  lesson6.doc  <CR>

Note that this puts you back in the "lesson6" buffer.  Try:

      C-X C-F  delete.me  <CR>

This puts you into the buffer called "other", with its original
file name.  So, C-X C-F always does an automatic C-X B command
for you, either to a buffer which contains the file name you
want, or to a brand new buffer into which it reads the file.  It
effectively prevents you from ever having to remember whether of
not you had read in a file.  Just use C-X C-F all the time.

      Do a C-X C-B to get a handle on what text buffers and files
we have again.  There is certainly a lot of junk, so let's get
rid of some of those old buffers.  The command to do this is
C-X K (for "Kill buffer").  Type:

      C-X K  lesson4  <CR>

This will kill the buffer called "lesson4", which contains the
file "lesson4.doc".  Be sure to keep the two distinct in your
mind.  C-X K and C-X B work with buffer names, and C-X C-F, C-X
C-R, and C-X C-W all work with file names.  Do a C-X C-B again,
and notice that the buffer named "lesson4" is no longer there.


      Now type:

      C-X K  other  <CR>

This command is intended to delete the buffer called "other",
which just happens to be the one on your screen now.  Mince will
not delete a buffer which we are currently working on, and so it
asks us which buffer we would like to go to instead.  Type "main"
followed by a carriage- return, and Mince will then switch you
back to the "main" buffer (which has the Lesson 8 text in it),
and try to delete the "other" buffer.

      But there is another message at the bottom of the screen:
Mince will ask you if you are sure that you want to kill the
buffer, because it has some text (those few characters) in it
which has not been written out to a since the changes were made.
(Remember the star in the C-X C-B listing and at the right end of
the mode line now?)  Answer "Y" for yes, and let Mince delete the
buffer.  You can check this out with a C-X C-B listing if you
like.


      What advantages does using several buffers have besides
allowing you to look at several files back and forth?  It allows
you to move or copy text from one to the other as well.  In
Lesson 6, we used the killing mechanism (or C-W wiping or M-W
copying mechanism) to move or copy text from one place to another
in a file.  This method works on multiple files in separate
buffers as well.  You can kill some text in one buffer, do a C-X B
command to another buffer, and yank back the killed text in the
new buffer.

      Let's work through an entire example in detail.  This is a
chance for us to review some of the many commands that you have
learned in Lessons 6, 7, and 8.  The task is to take the first
paragraph of this text, Lesson 8, and make it the first paragraph
of Lesson 6.  The buffer which we are now in, "main", contains
the file "lesson8.doc".  The other buffer, "lesson6", contains
the file "lesson6.doc".

      (1) M-< to the beginning of lesson8.

      (2) C-N down to the first line of the paragraph.

      (3) C-@ to set the mark at the beginning of the first line.

      (4) M-] to get to the end of the paragraph.

      (5) C-W to wipe out the paragraph.

      (6) C-X B to the buffer "lesson6"

      (7) M-< to the beginning of that buffer.

      (8) C-N down to just before the start of the first paragraph.

      (9) C-Y to yank the text back.  It should now be the first
          paragraph of Lesson 6.

Don't forget that the text is still yankable again; you may want
to go back to the other buffer and repair it with a C-Y.


      We have learned some commands in this lesson which you
might not use quite at first.  Sooner or later, though, you will
be using them regularly.  If you get into the habit of using
C-X C-F to read in a file initially, you will find it easier to
use the multiple buffers later when you need to.  Experiment
some more with buffers and moving text back and forth among
them.  When you exit Mince with the C-X C-C command, be sure NOT
to write out the buffers, so that Lessons 6 and 8 are intact for
the next person to use them.


] to get to the end of the paragraph.

    