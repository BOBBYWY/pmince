  Jeff, I just added a simple macro capability to MINCE. It's based on
the stuff Barry Dobyns (by the way he's the programmer behind Perfect
Writer) did in MACBIND.C which included incremental forward and reverse
searches and newdisplays that take arguments to move forward a number of
lines and re-display. I don't know why he made things so complicated but
I simplified the macro stuff enough so it still can work in our hacked
MINCEs with the 'C' mode and reset: the code ends at 78FF in my system!!!

The changes are (at least temporarily - the functions should be moved to
comm2.c eventually) made in bindings.c and the starting point is the last
hack you did to put in the reset function. There is also a rather trivial
change to the mince.gbl file: change the line

                        int spare[7];

to

                        #define NSPARE 14
                        char spare[NSPARE]; .

This will just allow us to make other changes without screwing up the
world later (i.e. if we want to use more of spare for other stuff). We
are also limited to (NSPARE - 1) chars in our macro; I said it was simple
minded. 

  The rest of the changes are made to bindings.c. They include 1)adding
the key bindings, 2)adding an initialization of spare to a null string
and 3)adding the MMakMacro() and MDoMacro() functions.

1)The key bindings:

  Add the following lines to finit2():

        int MMakMacro(), MDoMacro();    /* define as functions */

        functs[128+13] = MDoMacro;                              /* M-C-M */

        functs[128+'M']=functs[128+'m'] = MMakMacro;    /* M-M */

in the appropriate places (The last two must follow the loop that
initializes the functs to MNotImpl). These statements bind the making of
the macro to M-M and the executing of the macro to M-C-M. If you can
think of better bindings let me know. These are the ones used by Barry.

2)Initialization of spare:

  Change the line 

                        *drv = '\0';

found in the UInit() function to

                        *spare = *drv = '\0'; .

This keeps you from making a silly error by executing what ever garbage
happens to be there initially.

3)MMakMacro() and MDoMacro():

  Add the following two functions at the bottom of bindings.c for now.
(To do it right they should really go into comm2.c [as a matter of fact,
the disk reset function should be in comm3.c not comm1.c but what the
hell!] but let's keep things simple and only re-compile one file this
time around.)

MMakMacro()
{
        GetArg("Macro <C-]>: ", '\035', spare, NSPARE);
}

MDoMacro()
{
        char *macrop;
        
        TSetPoint(TMaxRow() - 1, 0);
        TCLEOL();
        for (macrop = spare; *macrop; ++macrop) {
                TPrntChar(*macrop);
                if (!QFull(&kbdq))
                        QShove(*macrop, &kbdq);
                else
                        TBell();
        }
}

That's it. Compile bindings.c at -e7900 and do the usual link. Now you've
got a small macro facility: up to 13 chars at this time. That still turns
out to be useful to me. I usually want to do something like ^U8^N^L or
^[r^J^[<NL>^[ (replace ^J by <NL> from UNIX files) and these work nicely.
It also retains the previous macro so that it can be executed again (and
again...). The end of the macro is signaled by a ^]: since that isn't a
standard MINCE command it reduces the necessity to "quote" chars. When
the macro is executed each character is printed on the "echo line" as it
is put into the keyboard command que. If it won't fit the bell rings and
you'll see how much was actually entered into the que. This part will be
executed.

                                                See you, Herb.

P.S. let me know if you run into any trouble with this since I've been a
bit sketchy.

